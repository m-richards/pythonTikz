#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# pythonTikZ documentation build configuration file, created by
# sphinx-quickstart on Sun Jan 26 21:11:24 2020.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import inspect
# sys.path.insert(0, os.path.abspath('..')) # up a level
# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('../../'))
from pythontikz import __version__

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.autosummary',
    'sphinx.ext.todo',
    'sphinx.ext.mathjax',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'pythonTikZ'
copyright = '2020, Matthew Richards'
author = 'Matthew Richards'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'  #version = __version__.rstrip('.dirty')
# The full version, including alpha/beta/rc tags.
release = '0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
# Note this sets what `<text> ` prefix is i.e. py:obj`<text>`
default_role = 'py:obj'


# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'pythonTikZdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'pythonTikZ.tex', 'pythonTikZ Documentation',
     'Matthew Richards', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'pythontikz', 'pythonTikZ Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'pythonTikZ', 'pythonTikZ Documentation',
     author, 'pythonTikZ', 'One line description of project.',
     'Miscellaneous'),
]




# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'matplotlib': ('https://matplotlib.org/', None),
    'numpy': ('https://docs.scipy.org/doc/numpy/', None),
    'PyLaTex': ('https://jeltef.github.io/PyLaTeX/latest', None,), }




# inherited features

autodoc_member_order = 'bysource'
autodoc_default_flags = ['inherited-members']
autoclass_content = 'both'


def auto_change_docstring(app, what, name, obj, options, lines):
    r"""Make some automatic changes to docstrings.

    Things this function does are:

        - Add a title to module docstrings
        - Merge lines that end with a '\' with the next line.
    """
    if what == 'module' and name.startswith('pythontikz'):
        lines.insert(0, len(name) * '=')
        lines.insert(0, name)

    hits = 0
    for i, line in enumerate(lines.copy()):
        if line.endswith('\\'):
            lines[i - hits] += lines.pop(i + 1 - hits)
            hits += 1



def autodoc_allow_most_inheritance(app, what, name, obj, namespace, skip,
                                   options=None):
    cls = namespace.split('.')[-1]

    members = {
        'object': ['dump', 'dumps_packages', 'dump_packages', 'latex_name',
                   'escape', 'generate_tex', 'packages', 'dumps_as_content',
                   'end_paragraph', 'separate_paragraph', 'content_separator'],

        'container': ['create', 'dumps', 'dumps_content', 'begin_paragraph'],

        'userlist': ['append', 'clear', 'copy', 'count', 'extend', 'index',
                     'insert', 'pop', 'remove', 'reverse', 'sort'],
        'error': ['args', 'with_traceback'],
    }

    members['all'] = list(set([req for reqs in members.values() for req in
                               reqs]))

    if name in members['all']:
        skip = True

        if cls == 'LatexObject':
            return False

        if cls in ('Container', 'Environment') and \
                name in members['container']:
            return False

        if cls == 'Document' and name == 'generate_tex':
            return False

    if name == 'separate_paragraph' and cls in ('SubFigure', 'Float'):
        return False

    # Ignore all functions of NoEscape, since it is inherited
    if cls == 'NoEscape':
        return True

    return skip


def setup(app):
    """Connect autodoc event to custom handler."""
    app.connect('autodoc-process-docstring', auto_change_docstring)
    app.connect('autodoc-skip-member', autodoc_allow_most_inheritance)


def linkcode_resolve(domain, info):
    """A simple function to find matching source code."""
    module_name = info['module']
    fullname = info['fullname']
    attribute_name = fullname.split('.')[-1]
    base_url = 'https://github.com/JelteF/PyLaTeX/'

    if '+' in version:
        commit_hash = version.split('.')[-1][1:]
        base_url += 'tree/%s/' % commit_hash
    else:
        base_url += 'blob/v%s/' % version

    filename = module_name.replace('.', '/') + '.py'
    module = sys.modules.get(module_name)

    # Get the actual object
    try:
        actual_object = module
        for obj in fullname.split('.'):
            parent = actual_object
            actual_object = getattr(actual_object, obj)
    except AttributeError:
        return None

    # Fix property methods by using their getter method
    if isinstance(actual_object, property):
        actual_object = actual_object.fget

    # Try to get the linenumber of the object
    try:
        source, start_line = inspect.getsourcelines(actual_object)
    except TypeError:
        # If it can not be found, try to find it anyway in the parents its
        # source code
        parent_source, parent_start_line = inspect.getsourcelines(parent)
        for i, line in enumerate(parent_source):
            if line.strip().startswith(attribute_name):
                start_line = parent_start_line + i
                end_line = start_line
                break
        else:
            return None

    else:
        end_line = start_line + len(source) - 1

    line_anchor = '#L%d-L%d' % (start_line, end_line)

    return base_url + filename + line_anchor

